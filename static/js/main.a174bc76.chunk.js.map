{"version":3,"sources":["firebase.js","Post.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Post","postId","user","username","caption","imageUrl","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","text","type","placeholder","value","onChange","e","target","disabled","onClick","event","preventDefault","add","displayName","timestamp","FieldValue","serverTimestamp","ImageUpload","image","setImage","progress","setProgress","setCaption","max","files","Button","ref","name","put","on","Math","round","bytesTransferred","totalBytes","error","console","log","alert","message","child","getDownloadURL","then","url","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","modalStyle","posts","setPosts","open","setOpen","openSignIn","setOpenSignIn","setUsername","email","setEmail","password","setPassword","setUser","onAuthStateChanged","authUser","id","post","Modal","onClose","style","Input","createUserWithEmailAndPassword","updateProfile","catch","signInWithEmailAndPassword","signOut","key","maxWidth","hideCaption","containerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a174bc76.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseApp =  firebase.initializeApp({\r\n    apiKey: \"AIzaSyB59grP37JZMbmpXbEmjnkiP6iYednFzaQ\",\r\n    authDomain: \"instagram-clone-bfe8d.firebaseapp.com\",\r\n    databaseURL: \"https://instagram-clone-bfe8d.firebaseio.com\",\r\n    projectId: \"instagram-clone-bfe8d\",\r\n    storageBucket: \"instagram-clone-bfe8d.appspot.com\",\r\n    messagingSenderId: \"176429851721\",\r\n    appId: \"1:176429851721:web:3f09555bf3ff6795d60b98\",\r\n    measurementId: \"G-006EJJ69K0\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\n\r\nexport { db, auth, storage};\r\n","import React, { useState, useEffect } from 'react'\r\nimport './Post.css';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport {db} from './firebase';\r\nimport firebase from 'firebase';\r\n\r\nfunction Post({postId, user, username, caption, imageUrl}) {\r\n\r\n    const [comments, setComments] = useState([]);\r\n    const [comment, setComment] = useState('');\r\n    useEffect(()=> {\r\n        let unsubscribe;\r\n          if (postId) {\r\n            unsubscribe = db\r\n                .collection(\"posts\")\r\n                .doc(postId)\r\n                .collection(\"comments\")\r\n                .orderBy('timestamp', 'asc')\r\n                .onSnapshot((snapshot) => {\r\n                    setComments(snapshot.docs.map((doc) => doc.data()));\r\n                });\r\n    \r\n          }\r\n    \r\n      return () => {\r\n        unsubscribe();\r\n      }\r\n      }, [postId]);\r\n\r\n    const postComment = (event) => {\r\n        event.preventDefault();\r\n\r\n        db.collection(\"posts\").doc(postId).collection(\"comments\").add({\r\n            text: comment,\r\n            username:  user.displayName,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n        });\r\n        setComment('');\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"post\">\r\n        <div className=\"post__header\">\r\n            <Avatar\r\n                className=\"post__avatar\"\r\n                alt='zakiyhisam'\r\n                src=\"/static/images/avatar/1.jpg\"\r\n            />\r\n        <h3> {username.username} </h3>\r\n\r\n        </div>\r\n\r\n        <img\r\n            className=\"post_image\" \r\n            src={imageUrl}\r\n            alt=\"\"\r\n            />\r\n\r\n        <h4 className=\"post_text\"><strong>{username.username}</strong> {caption}</h4>\r\n        \r\n        <div className=\"post__comments\">\r\n        {comments.map((comment) => (\r\n            <p>\r\n            <strong>{comment.username}</strong> {comment.text}\r\n            </p>\r\n        )\r\n\r\n        )\r\n        }\r\n        </div>\r\n\r\n        {user && (\r\n            <form className= \"post__commentBox\">\r\n            <input \r\n                className = \"post__input\"\r\n                type=\"text\"\r\n                placeholder=\"Add a comment...\"\r\n                value={comment}\r\n                onChange={(e) => setComment(e.target.value)}\r\n                />\r\n            \r\n            <button \r\n                className=\"post__button\"\r\n                disabled={!comment}\r\n                type=\"submit\"\r\n                onClick={postComment}\r\n                >\r\n                post</button>\r\n        </form>\r\n            )}\r\n         \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","import React, {useState} from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport firebase from \"firebase\";\r\nimport {storage, db} from './firebase';\r\nimport './ImageUpload.css';\r\n\r\nfunction ImageUpload(username) {\r\n    const [image, setImage] = useState(null);\r\n    const [progress, setProgress] = useState(0);\r\n    const [caption, setCaption] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        if (e.target.files[0]) {\r\n            setImage(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    const handleUpload = () => {\r\n        const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n        uploadTask.on(\r\n            \"state_changed\",\r\n            (snapshot) => {\r\n                const progress = Math.round(\r\n                    (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n                );\r\n                setProgress(progress);\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n                alert(error.message);\r\n            },\r\n            () => {\r\n                storage\r\n                .ref(\"images\")\r\n                .child(image.name)\r\n                .getDownloadURL()\r\n                .then(url => {\r\n                    db.collection(\"posts\").add({\r\n                        timestamp:firebase.firestore.FieldValue.serverTimestamp(),\r\n                        caption: caption,\r\n                        imageUrl: url,\r\n                        username: username\r\n                    });\r\n\r\n                    setProgress(0);\r\n                    setCaption(\"\");\r\n                    setImage(null);\r\n                });\r\n            }\r\n        );\r\n    };\r\n\r\n    return(\r\n        <div className=\"imageupload\">\r\n        <progress className=\"imageupload__progress\" value={progress} max=\"100\" />\r\n        <input type= \"text\" placeholder=\"enter a caption...\" onChange={event => setCaption(event.target.value)} value={caption} />\r\n        <input type=\"file\" onChange={handleChange} />\r\n        <Button onClick={handleUpload} >\r\n        Upload\r\n        </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageUpload","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Post from './Post';\nimport {db, auth} from './firebase';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport { Button, Input } from '@material-ui/core';\nimport ImageUpload from './ImageUpload';\nimport InstagramEmbed from 'react-instagram-embed';\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction App() {\n\n  const classes = useStyles();\n  const [modalStyle] = useState(getModalStyle);\n\n  const [posts, setPosts] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [openSignIn, setOpenSignIn] = useState(false);\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [user, setUser]= useState(null);\n\n  useEffect(()=> {\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        console.log(authUser);\n        setUser(authUser);\n\n      } else {\n        setUser(null);\n      }\n    })\n\n  return () => {\n    unsubscribe();\n  }\n  }, [user, username]);\n\n  useEffect(()=>{\n    db.collection('posts').orderBy('timestamp','desc').onSnapshot(snapshot => {\n      setPosts(snapshot.docs.map(doc => ({\n        id: doc.id,\n        post: doc.data()\n      })));\n    })\n  }, []);\n\n  const signUp= (event) => {\n    event.preventDefault();\n    auth\n    .createUserWithEmailAndPassword(email, password)\n    .then((authUser) =>{\n      return authUser.user.updateProfile({\n        displayName: username\n      })\n    })\n    .catch((error)=> alert(error.message));\n\n    setOpen(false);\n  }\n\n  const signIn = (event) => {\n    event.preventDefault();\n\n    auth.signInWithEmailAndPassword(email, password)\n    .catch((error) => alert(error.message));\n\n    setOpenSignIn(false);\n  }\n\n  return (\n    <div className=\"App\">\n\n\n    <Modal open={open} onClose={() => setOpen(false)}>\n      <div style={modalStyle} className={classes.paper}>\n        \n      <form className=\"app__signup\">\n      <center>\n        <img className=\"app_header_image\"\n              src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n              alt=\"\"\n        />\n      </center>\n\n      <Input \n        placeholder=\"username\"\n        type=\"username\"\n        value={username}\n        onChange={(e) => setUsername(e.target.value)} />\n      <Input \n        placeholder=\"email\"\n        type=\"text\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)} />\n      <Input \n        placeholder=\"password\"\n        type=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)} />\n      \n      <Button type=\"submit\" onClick={signUp}>Sign Up</Button>\n             \n      </form>\n        \n        \n      </div>\n\n  </Modal>\n\n    <Modal open={openSignIn} onClose={() => setOpenSignIn(false)}>\n    <div style={modalStyle} className={classes.paper}>\n\n  <form className=\"app__signup\">\n    <center>\n    <img className=\"app_header_image\"\n          src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n          alt=\"\"\n    />\n    </center>\n\n  <Input \n    placeholder=\"email\"\n    type=\"text\"\n    value={email}\n    onChange={(e) => setEmail(e.target.value)} />\n  <Input \n    placeholder=\"password\"\n    type=\"password\"\n    value={password}\n    onChange={(e) => setPassword(e.target.value)} />\n  \n  <Button type=\"submit\" onClick={signIn}>Sign In</Button>\n         \n  </form>\n    \n    \n  </div>\n\n</Modal>\n      <div className=\"app_header\">\n        <img className=\"app_header_image\"\n              src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n              alt=\"\"\n        />     \n        {user ? (\n          <Button onClick={() => auth.signOut()}>Logout</Button>\n          ):(\n            <div className=\"app_loginContainer\">\n            <Button onClick={() => setOpenSignIn(true)}>Login</Button>\n            <Button onClick={() => setOpen(true)}>Sign Up</Button>\n            </div>\n        ) }\n      </div>\n      <div className=\"app__posts\">\n      <div className=\"app__postsleft\">\n      {\n        posts.map(({id, post}) => (\n          <Post key={id} postId={id} user={user} username={post.username} caption={post.caption} imageUrl={post.imageUrl}/>\n        ))\n      }\n      </div>\n\n      <div className=\"app__postsRight\">\n          <InstagramEmbed\n              url='https://www.instagram.com/p/B_uf9dmAGPw/'\n              maxWidth={320}\n              hideCaption={false}\n              containerTagName='div'\n              protocol=''\n              injectScript\n              onLoading={() => {}}\n              onSuccess={() => {}}\n              onAfterRender={() => {}}\n              onFailure={() => {}}\n            />\n      </div>\n      </div>\n\n\n      {user?.displayName? ( \n        <ImageUpload username={user.displayName} />\n        ):( <h3> Sorry you need to login to upload </h3>\n        )}\n  </div>\n    \n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}